// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  documents Document[]
}

model Document {
  id String @id @default(uuid())
  title String
  content String @db.Text 
  userId String 

  //Document type
  documentType String @default("new") //"new" | "uploaded" -> types for doctype

  //file metadata (for uploaded files only)
  originalFileName String?
  originalFileSize Int?
  originalMimeType String?
  originalFileUrl String?

  //processing status
  processingStatus String @default("completed") //"completed" | "processing" | "failed"
  processingError String?

  //Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastEditedAt DateTime @default(now())

  //relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  images DocumentImage[]

  @@index([userId])
  @@index([documentType])
  @@index([processingStatus])
}

model DocumentImage {

  id String @id @default(uuid())
  documentId String
  originalName String 
  fileName String //generated unique filename
  fileUrl String //url to stored image
  fileSize Int 
  mimeType String 
  createdAt DateTime @default(now())

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
}